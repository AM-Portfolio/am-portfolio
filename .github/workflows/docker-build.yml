name: Docker Build and Push

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'feature/**'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - uses: actions/checkout@v3
      
      - name: Set lowercase repository name
        id: repo-name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Copy settings.xml from repo
      - name: Setup Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cp settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          GITHUB_PACKAGES_USERNAME: ${{ github.actor }}
          GITHUB_PACKAGES_TOKEN: ${{ github.token }}

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
            ${{ runner.os }}-buildx-

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/market-data-service
          tags: |
            type=raw,value=v${{ github.run_id }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            type=ref,event=branch,prefix=feature-,enable=${{ startsWith(github.ref, 'refs/heads/feature/') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha,scope=${{ github.workflow }}
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,scope=${{ github.workflow }},mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            GITHUB_PACKAGES_USERNAME=${{ github.actor }}
            GITHUB_PACKAGES_TOKEN=${{ github.token }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.REPO_NAME }}/portfolio-service,push=true

      # Temp fix to prevent cache from growing too large
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      # Save image tag to artifact
      - name: Save image tag to artifact
        run: |
          echo "v${{ github.run_id }}" > image-tag.txt
      
      - name: Upload image tag as artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt
          retention-days: 1

  # Trigger deployment workflow
  deploy:
    needs: build-and-push
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/unified-deployment.yml
    with:
      image_tag: v${{ github.run_id }}
    secrets: inherit
